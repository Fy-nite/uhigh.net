using System.Text.Json;
using System.Xml;
using System.Xml.Serialization;
using uhigh.Net.Diagnostics;

namespace uhigh.Net
{
    public class ProjectFile
    {
        private static readonly JsonSerializerOptions JsonOptions = new()
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        private static readonly XmlSerializer Serializer = new(typeof(uhighProject));

        public static async Task<uhighProject?> LoadAsync(string projectPath, DiagnosticsReporter? diagnostics = null)
        {
            try
            {
                if (!File.Exists(projectPath))
                {
                    diagnostics?.ReportError($"Project file not found: {projectPath}");
                    return null;
                }

                // Check if this is actually a project file by extension
                if (!projectPath.EndsWith(".uhighproj", StringComparison.OrdinalIgnoreCase))
                {
                    diagnostics?.ReportError($"Invalid project file extension. Expected .uhighproj, got: {Path.GetExtension(projectPath)}");
                    return null;
                }

                using var stream = new FileStream(projectPath, FileMode.Open, FileAccess.Read);
                var project = (uhighProject?)Serializer.Deserialize(stream);
                
                if (project == null)
                {
                    diagnostics?.ReportError($"Failed to parse project file: {projectPath}");
                    return null;
                }

                // Resolve relative paths relative to the project directory
                var projectDir = Path.GetDirectoryName(projectPath) ?? "";
                for (int i = 0; i < project.SourceFiles.Count; i++)
                {
                    if (!Path.IsPathRooted(project.SourceFiles[i]))
                    {
                        project.SourceFiles[i] = Path.Combine(projectDir, project.SourceFiles[i]);
                    }
                }

                diagnostics?.ReportInfo($"Loaded project: {project.Name} v{project.Version}");
                return project;
            }
            catch (Exception ex)
            {
                diagnostics?.ReportError($"Failed to load project file {projectPath}: {ex.Message}");
                return null;
            }
        }

        public static async Task<bool> SaveAsync(uhighProject project, string projectPath, DiagnosticsReporter? diagnostics = null)
        {
            try
            {
                var settings = new XmlWriterSettings
                {
                    Indent = true,
                    IndentChars = "  ",
                    NewLineChars = "\n",
                    Async = true
                };

                using var writer = XmlWriter.Create(projectPath, settings);
                Serializer.Serialize(writer, project);
                await writer.FlushAsync();
                
                diagnostics?.ReportInfo($"Saved project file: {projectPath}");
                return true;
            }
            catch (Exception ex)
            {
                diagnostics?.ReportError($"Failed to save project file {projectPath}: {ex.Message}");
                return false;
            }
        }

        public static async Task<bool> CreateAsync(string projectName, string projectDir, DiagnosticsReporter? diagnostics = null)
        {
            try
            {
                var project = uhighProject.CreateDefault(projectName);
                var projectPath = Path.Combine(projectDir, $"{projectName}.uhighproj");

                // Create directory if it doesn't exist
                if (!Directory.Exists(projectDir))
                {
                    Directory.CreateDirectory(projectDir);
                }

                // Create a default main.uh file
                var mainuhighPath = Path.Combine(projectDir, "main.uh");
                if (!File.Exists(mainuhighPath))
                {
                    var defaultCode = $@"// {projectName} - Generated by μHigh.Net
// Entry point for your μHigh.Net application

func main() {{
    print(""Hello from {projectName}!"")
}}
";
                    await File.WriteAllTextAsync(mainuhighPath, defaultCode);
                }

                return await SaveAsync(project, projectPath, diagnostics);
            }
            catch (Exception ex)
            {
                diagnostics?.ReportError($"Failed to create project: {ex.Message}");
                return false;
            }
        }
    }
}
